import React from 'react';
import { Modal, ModalProps } from '../Modal';
export interface TipProps extends ModalProps {
    custom?: boolean;
    body?: any;
    duration?: number | null;
    position?: 'top' | 'left' | 'right' | 'bottom' | 'center' | ['top', 'left'] | ['top'] | ['top', 'right'] | ['left'] | ['center'] | ['right'] | ['bottom', 'left'] | ['bottom'] | ['bottom', 'right'];
}
export declare class Tip extends Modal<TipProps> {
    9: any;
    static defaultProps: {
        position: string;
        cancelable: boolean;
        backdropColor: string;
        body: string;
        duration: null;
        custom: boolean;
        scrollable: boolean;
        viewportWidth: number;
        viewportHeight: number;
        offsetX: number;
        offsetY: number;
        animatedTranslateX: null;
        animatedTranslateY: null;
        containerStyle: {};
        style: {};
        onOpen: null;
        onOpened: null;
        onClose: null;
        onClosed: null;
    };
    static tipInstance: Tip | null;
    static show: (msg: string, duration?: number | undefined, cancelable?: boolean | undefined, position?: string | string[] | undefined) => Promise<any>;
    static view: (elm: React.ReactElement, duration?: number | undefined, cancelable?: boolean | undefined, position?: string | string[] | undefined) => Promise<any> | undefined;
    static hide: () => any;
    constructor(props: any);
    init(props: any, syncTag?: boolean): void;
    componentWillReceiveProps(nextProps: any): void;
    getContent(c: any): JSX.Element;
    getBody(c: any): any;
    open(c?: any): Promise<any>;
    render(): null;
}
